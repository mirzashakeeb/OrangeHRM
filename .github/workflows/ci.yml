name: Selenium Single Test

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Cache pip
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Install Google Chrome
      - name: Install Google Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg unzip
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      # Check Chrome and ChromeDriver versions
      - name: Check Chrome and ChromeDriver versions
        run: |
          google-chrome --version
          python -c "from webdriver_manager.chrome import ChromeDriverManager; print('ChromeDriver:', ChromeDriverManager().install())"

      # Run Pytest
      - name: Run tests
        run: |
          mkdir -p reports/allure-results
          mkdir -p reports
          pytest \
            --alluredir=reports/allure-results \
            --html=reports/test_report.html \
            --self-contained-html \
            --junitxml=reports/junit.xml \
            -q --disable-warnings

      # Upload pytest HTML report
      - name: Upload pytest HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-html-report
          path: reports/test_report.html

      # Generate Allure HTML Report
      - name: Generate Allure HTML Report
        if: always()
        run: |
          pip install allure-python-commons
          allure generate reports/allure-results -o reports/allure-report --clean

      #Upload Allure HTML Report
      - name: Upload Allure HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: reports/allure-report

      # Pytest Summary
      - name: Pytest Summary
        if: always()
        uses: test-summary/action@v2
        with:
          paths: reports/junit.xml
